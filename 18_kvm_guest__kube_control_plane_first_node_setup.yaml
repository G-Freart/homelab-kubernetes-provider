# ------------------------------------------------------------------------------------------ #
#                                                                                            #
#                Copyright (c) 2021 - Gilles Freart. All right reserved                      #
#                                                                                            #
#  Licensed under the MIT License. See LICENSE in the project root for license information.  #
#                                                                                            #
# ------------------------------------------------------------------------------------------ #

- name:     This playbook will configure the first control plane node 
  hosts:    control_planes
  run_once: true

  vars_files:
    - vars/default-settings.yaml
    - group_vars/kvm_guest/cloud_images.yaml
    
  tasks:

    - block:
        - name: Loading CentOS 7 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-7.yaml
            name:        c7x
        - name: Loading CentOS 8.1 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.1.yaml
            name:        c81
        - name: Loading CentOS 8.2 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.2.yaml
            name:        c82
        - name: Loading CentOS 8.3 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.3.yaml
            name:        c83
        - name: Loading CentOS 8 Stream cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8-stream.yaml
            name:        c8s
        - name: Loading Ubuntu 18.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-18.04.yaml
            name:        u1804
        - name: Loading Ubuntu 20.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.04.yaml
            name:        u2004
        - name: Loading Ubuntu 20.10 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.10.yaml
            name:        u2010
        - name: Loading Your custom cluster definition
          include_vars:
            file:        vars/clusters.yaml
            name:        custo
        - name: Merging all cluster definitions
          set_fact:
            clusters: "{{ custo | combine(c7x, recursive=True) | combine(c81, recursive=True) | combine(c82, recursive=True) | combine(c83, recursive=True) | combine(c8s, recursive=True) | combine(u1804, recursive=True) | combine(u2004, recursive=True) | combine(u2010, recursive=True) }}"

    - name:  Kube setup first control plane -- Current provisioning facts of the VMs 
      debug:
        var: ansible_local['homelab-kubernetes-provisioner']

    - name: Kube setup first control plane -- Computing instance directory
      set_fact:
        instance_dir: "instances/{{ lookup('file', '/var/lib/dbus/machine-id') }}"
        
    - name:  Kube setup first control plane -- Configure the first control plane
      block:

        - name: Kube setup first control plane -- Reset any previous setting
          shell:     kubeadm reset --force
          become:    true
 
        - name: Kube setup first control plane -- Loading overlay kernel module 
          modprobe:
            name:      overlay
            state:     present
          become:      true

        - name: Kube setup first control plane -- Loading br_netfilter kernel module 
          modprobe:
            name:      br_netfilter
            state:     present
          become:      true

        - name: Kube setup first control plane -- Enable kubelet daemon
          command:   systemctl enable kubelet
          become:    true

        - name: Kube setup first control plane -- Ensuring kubelet is running
          shell:     systemctl start kubelet
          become:    true
 
        - name: Kube setup first control plane -- Pulling prerequisite image
          shell:     kubeadm config images pull
          become:    true

        - name: Kube setup first control plane -- Single control plane setup
          block:
            - name: Kube setup first control plane -- Performing the kubeadm init inside a single control plane node cluster. This can take up to 4m0s
              shell: >   
                kubeadm init 
                --pod-network-cidr {{ clusters.definition[cluster_name].network.pod_cidr }} 
                --service-cidr {{ clusters.definition[cluster_name].network.service_cidr }}
              when:      clusters.definition[cluster_name].control_planes.vms == 1
              become:    true
              register:  kubeadm_init_result

            - name: Kube setup first control plane -- Output of the kubeadm init
              debug:
                var: kubeadm_init_result
              when: False

            - name: Kube setup first control plane -- Retreiving the k8s token within the cluster instance info
              copy:
                dest:      "{{ instance_dir }}/{{ cluster_name }}/kubelet/kubelet_token.txt"
                content:   "{{ kubeadm_init_result.stdout | regex_search('--token ([0-9a-zA-Z]{6}.[0-9a-zA-Z]{16})') | regex_search('([0-9a-zA-Z]{6}.[0-9a-zA-Z]{16})') }}"
              delegate_to: localhost
              vars:
                ansible_python_interpreter: /usr/bin/python3

            - name: Kube setup first control plane -- Retreiving the k8s CA certificate hash within the cluster instance info
              copy:
                dest:      "{{ instance_dir }}/{{ cluster_name }}/kubelet/kubelet_ca_hash.txt"
                content:   "{{ kubeadm_init_result.stdout | regex_search('sha256:[0-9a-zA-Z]{64}') | regex_search('[0-9a-zA-Z]{64}') }}"
              delegate_to: localhost
              vars:
                ansible_python_interpreter: /usr/bin/python3

          when: clusters.definition[cluster_name].control_planes.vms == 1

        - name: Kube setup first control plane -- First control plane node setup
          block:
            - name: Kube setup first control plane -- Performing the kubeadm init inside a multiple control plane nodes cluster. This can take up to 4m0s
              shell: >
                kubeadm init 
                --control-plane-endpoint {{ hostvars[groups['load_balancers'][0]].inventory_hostname }} 
                --upload-certs  
                --pod-network-cidr {{ clusters.definition[cluster_name].network.pod_cidr }} 
                --service-cidr {{ clusters.definition[cluster_name].network.service_cidr }}
              become:    true
              register:  kubeadm_init_result

            - name: Kube setup first control plane -- Output of the kubeadm init
              debug:
                var: kubeadm_init_result
              when: False

            - name: Kube setup first control plane -- Retreiving the k8s token within the cluster instance info
              copy:
                dest:      "{{ instance_dir }}/{{ cluster_name }}/kubelet/kubelet_token.txt"
                content:   "{{ kubeadm_init_result.stdout | regex_search('--token ([0-9a-zA-Z]{6}.[0-9a-zA-Z]{16})') | regex_search('([0-9a-zA-Z]{6}.[0-9a-zA-Z]{16})') }}"
              delegate_to: localhost
              vars:
                ansible_python_interpreter: /usr/bin/python3

            - name: Kube setup first control plane -- Retreiving the k8s CA certificate hash within the cluster instance info
              copy:
                dest:      "{{ instance_dir }}/{{ cluster_name }}/kubelet/kubelet_ca_hash.txt"
                content:   "{{ kubeadm_init_result.stdout | regex_search('sha256:[0-9a-zA-Z]{64}') | regex_search('[0-9a-zA-Z]{64}') }}"
              delegate_to: localhost
              vars:
                ansible_python_interpreter: /usr/bin/python3

            - name: Kube setup first control plane -- Retreiving the k8s certificate key within the cluster instance info
              copy:
                dest:      "{{ instance_dir }}/{{ cluster_name }}/kubelet/kubelet_certificate_key.txt"
                content:   "{{ kubeadm_init_result.stdout | regex_search('certificate-key [0-9a-zA-Z]{64}') | regex_search('[0-9a-zA-Z]{64}') }}"
              when:        clusters.definition[cluster_name].control_planes.vms > 1
              delegate_to: localhost
              vars:
                ansible_python_interpreter: /usr/bin/python3
          
          when: clusters.definition[cluster_name].control_planes.vms > 1

        - name: Kube setup first control plane -- Creating user kube directory
          file:
            path:  /home/{{ username }}/.kube
            state: directory

        - name: Kube setup first control plane -- Filling user kube directory
          copy:
            src:        /etc/kubernetes/admin.conf
            dest:       /home/{{ username }}/.kube/config
            remote_src: true
            owner:      "{{ username }}"
            group:      "{{ username }}"
          become: true

        - name: Kube setup first control plane -- Creating root kube directory
          file:
            path:  /root/.kube
            state: directory
          become: true

        - name: Kube setup first control plane -- Filling root kube directory
          copy:
            src:        /etc/kubernetes/admin.conf
            dest:       /root/.kube/config
            remote_src: true
            owner:      root
            group:      root
          become: true

        - name:       Kube setup first control plane -- Waiting until all control plane system pods has been created
          shell:      "kubectl get pods --namespace=kube-system --selector tier=control-plane --output=jsonpath='{.items[*].metadata.name}'"
          register:   pods_creation_checking
          until:      item in pods_creation_checking.stdout
          delay:      10
          with_items:
            - "etcd-{{ inventory_hostname }}"
            - "kube-apiserver-{{ inventory_hostname }}"
            - "kube-controller-manager-{{ inventory_hostname }}"
            - "kube-scheduler-{{ inventory_hostname }}"
          retries:    30

        - name:       Kube setup first control plane -- Waiting until all control plane system pods readiness
          shell:      "kubectl wait pods --namespace=kube-system --selector tier=control-plane --for=condition=Ready --timeout=600s"
          register:   pods_readiness_checking

        - name: Kube setup first control plane -- Storing new state inside the homelab-kubernetes-provisioner custom fact
          lineinfile:
            path:   /etc/ansible/facts.d/homelab-kubernetes-provisioner.fact
            line:   "kube_node_type=control plane"
          become:   true

        - name: Kube setup first control plane -- Reload the homelab-kubernetes-provisioner custom fact
          setup:
            filter: ansible_local          

      when: 
        - inventory_hostname == groups['control_planes'][0]
        - ansible_local['homelab-kubernetes-provisioner']['setup']['kube_node_type'] is not defined
