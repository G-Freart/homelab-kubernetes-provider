# ------------------------------------------------------------------------------------------ #
#                                                                                            #
#                Copyright (c) 2021 - Gilles Freart. All right reserved                      #
#                                                                                            #
#  Licensed under the MIT License. See LICENSE in the project root for license information.  #
#                                                                                            #
# ------------------------------------------------------------------------------------------ #

- name: This playbook install Docker as container runtime
  hosts: control_planes,workers

  vars_files:
    - vars/default-settings.yaml
    - group_vars/kvm_guest/cloud_images.yaml
    - group_vars/kvm_guest/docker_packages.yaml
    
  tasks:

    - block:
        - name: Loading CentOS 7 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-7.yaml
            name:        c7x
        - name: Loading CentOS 8 Stream cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8-stream.yaml
            name:        c8s
        - name: Loading Ubuntu 20.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.04.yaml
            name:        u2004
        - name: Loading Ubuntu 20.10 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.10.yaml
            name:        u2010
        - name: Loading Your custom cluster definition
          include_vars:
            file:        vars/clusters.yaml
            name:        custo
        - name: Merging all cluster definitions
          set_fact:
            clusters: "{{ custo | combine(c7x, recursive=True) | combine(c8s, recursive=True) | combine(u2004, recursive=True) | combine(u2010, recursive=True) }}"

    - name:  Docker setup -- Current provisioning facts of the VMs 
      debug:
        var: ansible_local['homelab-kubernetes-provider']

    - name:  Docker setup -- Install Docker if whished
      block:

        - name: Docker setup -- Processing Red-Hat like VM
          block:

            - name: Docker setup -- Applying prerequisite yum package
              yum:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  docker_packages[clusters.definition[cluster_name].guest_os].yum_prerequisite_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     docker_packages[clusters.definition[cluster_name].guest_os].yum_prerequisite_list is defined

            - name: Docker setup -- Installing docker_ce yum repo
              get_url:
                url:     "{{ docker_packages[clusters.definition[cluster_name].guest_os].repo_docker_ce_url }}"
                dest:     "/etc/yum.repos.d/{{ docker_packages[clusters.definition[cluster_name].guest_os].repo_docker_ce_url
                                                 | basename
                                            }}"
              become:     true

            - name: Docker setup -- Force yum repo cache refresh as we have hancrafted new repo file
              yum:
                update_cache: yes
              become:     true

            - name: Docker setup -- Applying docker ce yum package
              yum:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  docker_packages[clusters.definition[cluster_name].guest_os].yum_docker_ce_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     docker_packages[clusters.definition[cluster_name].guest_os].yum_docker_ce_list is defined

          when: cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'yum'

        - name: Docker setup -- Processing Debian like VM 
          block:

            - name: Docker setup -- Applying prerequisite apt package
              apt:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  docker_packages[clusters.definition[cluster_name].guest_os].apt_prerequisite_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     docker_packages[clusters.definition[cluster_name].guest_os].apt_prerequisite_list is defined

            - name: Docker setup -- Installing apt docker ce key
              shell:
                cmd:      "{{ docker_packages[clusters.definition[cluster_name].guest_os].docker_key_cmd }}"
                warn:     false
              become:     true

            - name: Docker setup -- Installing apt docker ce repo under amd64 architecture
              shell:
                cmd:      "{{ docker_packages[clusters.definition[cluster_name].guest_os].add_repository_amd64_cmd }}"
                warn:     false
              become:     true
              when: ansible_architecture == 'x86_64' 
              
            - name: Docker setup -- Installing apt docker ce repo under arm64 architecture
              shell:
                cmd:      "{{ docker_packages[clusters.definition[cluster_name].guest_os].add_repository_arm64_cmd }}"
                warn:     false
              become:     true
              when: ansible_architecture == 'aarch64' 

            - name: Docker setup -- Force apt repo cache refresh as we have hancrafted new repo file
              apt:
                update_cache: yes
              become:     true

            - name: Docker setup -- Applying docker ce apt package
              apt:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  docker_packages[clusters.definition[cluster_name].guest_os].apt_docker_ce_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     docker_packages[clusters.definition[cluster_name].guest_os].apt_docker_ce_list is defined

          when: cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'apt'

        - name: Docker setup -- Create the docker configuration repository
          file:
            state:      directory
            recurse:    yes
            path:       /etc/docker
          become: true

        - name : Docker setup -- Create the docker daemon configuration
          copy:
            dest:       /etc/docker/daemon.json
            content: |
              {
                "exec-opts": ["native.cgroupdriver=systemd"],
                "log-driver": "json-file",
                "log-opts": {
                  "max-size": "100m"
                },
                "storage-driver": "overlay2",
                "storage-opts": [
                  "overlay2.override_kernel_check=true"
                ]
              }                  
          become: true

        - name: Docker setup -- Create the docker service folder
          file:
            state:      directory
            recurse:    yes
            path:       /etc/systemd/system/docker.service.d
          become: true

        - name: Docker setup -- Force systemd to reread configs 
          systemd:
            daemon_reload: true
          become:          true

        #
        # https://github.com/ansible/ansible/issues/71528 => using shell command :-S
        #
        #   - name: Docker setup -- Enable and start Docker daemon
        #     systemd:
        #       name:          docker
        #       state:         started
        #       enabled:       yes
        #     become:          true
        #
        
        - name: Docker setup -- Enable Docker daemon
          command: systemctl enable docker
          become:          true

        - name: Docker setup -- Start Docker daemon
          command: systemctl start docker
          become:          true

        - name: Docker setup -- Check if reboot is required under Debian like VMs
          stat:
            path: /var/run/reboot-required
          register: reboot_required
          when:     cloud_images[clusters.definition[cluster_name].guest_os].package_reboot_check == 'reboot_required'
          become:   true

        - name: Docker setup -- Check if reboot is required under Red Hat like VMs
          shell:
            cmd: needs-restarting -r
          register: needs_restarting
          when:     cloud_images[clusters.definition[cluster_name].guest_os].package_reboot_check == 'needs_restarting'
          become:   true

        - name: Docker setup -- Reboot VMs if needed
          reboot:
            msg:               "Reboot initiated by Ansible as requested by /var/run/reboot-required or needs_restarting"
            connect_timeout:   5
            reboot_timeout:    120
            pre_reboot_delay:  0
            post_reboot_delay: 30
            test_command:      whoami
          become:   true
          when: (reboot_required is defined and reboot_required.stat is defined and reboot_required.stat.exists)
             or (needs_restarting is defined and needs_restarting.rc is defined and needs_restarting.rc != 0)

        - name: Docker setup -- Storing new state inside the homelab-kubernetes-provider custom fact
          lineinfile:
            path:   /etc/ansible/facts.d/homelab-kubernetes-provider.fact
            line:   "container_runtime=docker"
          become:   true

        - name: Docker setup -- Reload the homelab-kubernetes-provider custom fact
          setup:
            filter: ansible_local          

      when: 
        - clusters.definition[cluster_name].container_runtime == 'docker'
        - docker_packages[clusters.definition[cluster_name].guest_os] is defined
        - ansible_local['homelab-kubernetes-provider']['setup']['container_runtime'] is not defined

