# ------------------------------------------------------------------------------------------ #
#                                                                                            #
#                Copyright (c) 2021 - Gilles Freart. All right reserved                      #
#                                                                                            #
#  Licensed under the MIT License. See LICENSE in the project root for license information.  #
#                                                                                            #
# ------------------------------------------------------------------------------------------ #

- name: This playbook install containerd as container runtime
  hosts: control_planes,workers

  vars_files:
    - vars/default-settings.yaml
    - group_vars/kvm_guest/cloud_images.yaml      
    - group_vars/kvm_guest/containerd_packages.yaml
    
  tasks:

    - block:
        - name: Loading CentOS 7 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-7.yaml
            name:        c7x
        - name: Loading CentOS 8.1 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.1.yaml
            name:        c81
        - name: Loading CentOS 8.2 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.2.yaml
            name:        c82
        - name: Loading CentOS 8.3 cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8.3.yaml
            name:        c83
        - name: Loading CentOS 8 Stream cluster samples
          include_vars:
            file:        vars/testlab_samples/centos-8-stream.yaml
            name:        c8s
        - name: Loading Ubuntu 18.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-18.04.yaml
            name:        u1804
        - name: Loading Ubuntu 20.04 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.04.yaml
            name:        u2004
        - name: Loading Ubuntu 20.10 cluster samples
          include_vars:
            file:        vars/testlab_samples/ubuntu-20.10.yaml
            name:        u2010
        - name: Loading Your custom cluster definition
          include_vars:
            file:        vars/clusters.yaml
            name:        custo
        - name: Merging all cluster definitions
          set_fact:
            clusters: "{{ custo | combine(c7x, recursive=True) | combine(c81, recursive=True) | combine(c82, recursive=True) | combine(c83, recursive=True) | combine(c8s, recursive=True) | combine(u1804, recursive=True) | combine(u2004, recursive=True) | combine(u2010, recursive=True) }}"

    - name:  Containerd setup -- Current provisioning facts of the VMs 
      debug:
        var: ansible_local['homelab-kubernetes-provider']

    - name:  Containerd setup -- Install containerd if whished
      block:

        - name: Containerd setup -- Loading overlay kernel module 
          modprobe:
            name:      overlay
            state:     present
          become:      true

        - name: Containerd setup -- Loading br_netfilter kernel module 
          modprobe:
            name:      br_netfilter
            state:     present
          become:      true

        - name : Containerd setup -- Configuring module needed by containerd
          copy:
            dest:      /etc/modules-load.d/containerd.conf
            content: |
              overlay
              br_netfilter
          become: true

        - name : Containerd setup -- Configuring sysctl settings needed
          copy:
            dest:      /etc/sysctl.d/99-kubernetes-cri.conf
            content: |
              net.bridge.bridge-nf-call-iptables  = 1
              net.ipv4.ip_forward                 = 1
              net.bridge.bridge-nf-call-ip6tables = 1
          become: true

        - name: Containerd setup -- Activating sysctl settings
          shell:
            cmd:      "sysctl --system"
          become:     true

        - name: Containerd setup -- Create directory for containerd configuration
          file:
            state:      directory
            recurse:    yes
            path:       /etc/containerd
          become: true

        - name: Containerd setup -- Processing Red-Hat like VM
          block:
            - name: Containerd setup -- Applying prerequisite yum package
              yum:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  containerd_packages[clusters.definition[cluster_name].guest_os].yum_prerequisite_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     containerd_packages[clusters.definition[cluster_name].guest_os].yum_prerequisite_list is defined

            - name: Containerd setup -- Installing docker_ce yum repo
              get_url:
                url:     "{{ containerd_packages[clusters.definition[cluster_name].guest_os].repo_docker_ce_url }}"
                dest:     "/etc/yum.repos.d/{{ containerd_packages[clusters.definition[cluster_name].guest_os].repo_docker_ce_url
                                                 | basename
                                            }}"
              become:     true

            - name: Containerd setup -- Applying containerd yum package
              yum:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  containerd_packages[clusters.definition[cluster_name].guest_os].yum_containerd_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     containerd_packages[clusters.definition[cluster_name].guest_os].yum_containerd_list is defined

            - name: Containerd setup -- Force yum repo cache refresh as we have hancrafted new repo file
              yum:
                update_cache: yes
              become:     true

          when: cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'yum'

        - name: Containerd setup -- Processing Debian like VM 
          block:
            - name: Containerd setup -- Applying prerequisite apt package
              apt:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  containerd_packages[clusters.definition[cluster_name].guest_os].apt_prerequisite_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     containerd_packages[clusters.definition[cluster_name].guest_os].apt_prerequisite_list is defined

            - name: Containerd setup -- Applying containerd apt package
              apt:
                name:   "{{ item.name }}"
                state:  "{{ item.state }}"
              loop:     "{{  containerd_packages[clusters.definition[cluster_name].guest_os].apt_containerd_list }}"
              register: result
              until:    result is succeeded
              become:   true
              when:     containerd_packages[clusters.definition[cluster_name].guest_os].apt_containerd_list is defined

            - name: Containerd setup -- Force apt repo cache refresh as we have hancrafted new repo file
              apt:
                update_cache: yes
              become:     true

          when: cloud_images[clusters.definition[cluster_name].guest_os].package_manager == 'apt'

        - name: Containerd setup -- Create containerd configuration
          shell:
            cmd:    "containerd config default | tee /etc/containerd/config.toml"
          become: true

        - name: Containerd setup -- Change containerd configuration to use systemd
          lineinfile:
            dest:           "/etc/containerd/config.toml"
            insertafter:    "plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options"
            line:           "            SystemdCgroup = true"
          become: true

        
        # https://github.com/ansible/ansible/issues/71528 => using shell command :-S
        #
        #   - name: Containerd setup -- Enable and start containerd daemon
        #     systemd:
        #       name:          containerd
        #       state:         started
        #       enabled:       yes
        #     become:          true
        #
        
        - name: Containerd setup -- Enable containerd daemon
          command: systemctl enable containerd
          become:          true

        - name: Containerd setup -- Start containerd daemon
          command: systemctl start containerd
          become:          true

        - name: Containerd setup -- Check if reboot is required under Debian like VMs
          stat:
            path: /var/run/reboot-required
          register: reboot_required
          when:     cloud_images[clusters.definition[cluster_name].guest_os].package_reboot_check == 'reboot_required'
          become:   true

        - name: Containerd setup -- Check if reboot is required under Red Hat like VMs
          shell:
            cmd: needs-restarting -r
          register: needs_restarting
          when:     cloud_images[clusters.definition[cluster_name].guest_os].package_reboot_check == 'needs_restarting'
          become:   true

        - name: Containerd setup -- Reboot VMs if needed
          reboot:
            msg:               "Reboot initiated by Ansible as requested by /var/run/reboot-required or needs_restarting"
            connect_timeout:   5
            reboot_timeout:    120
            pre_reboot_delay:  0
            post_reboot_delay: 30
            test_command:      whoami
          become:   true
          when: (reboot_required is defined and reboot_required.stat is defined and reboot_required.stat.exists)
             or (needs_restarting is defined and needs_restarting.rc is defined and needs_restarting.rc != 0)

        - name: Containerd setup -- Storing new state inside the homelab-kubernetes-provider custom fact
          lineinfile:
            path:   /etc/ansible/facts.d/homelab-kubernetes-provider.fact
            line:   "container_runtime=containerd"
          become:   true

        - name: Containerd setup -- Reload the homelab-kubernetes-provider custom fact
          setup:
            filter: ansible_local          

      when: 
        - clusters.definition[cluster_name].container_runtime == 'containerd'
        - containerd_packages[clusters.definition[cluster_name].guest_os] is defined
        - containerd_packages[clusters.definition[cluster_name].guest_os].supported is defined
        - containerd_packages[clusters.definition[cluster_name].guest_os].supported == True
        - ansible_local['homelab-kubernetes-provider']['setup']['container_runtime'] is not defined
